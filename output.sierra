type felt = felt;
type Tuple<felt, felt> = Struct<ut@Tuple, felt, felt>;
type Unit = Struct<ut@Tuple>;
type core::option::Option::<(core::felt, core::felt)> = Enum<ut@core::option::Option::<(core::felt, core::felt)>, Tuple<felt, felt>, Unit>;
type core::option::Option::<core::felt> = Enum<ut@core::option::Option::<core::felt>, felt, Unit>;
type examples::enum_flow::MyEnumShort = Enum<ut@examples::enum_flow::MyEnumShort, felt, felt>;
type examples::enum_flow::MyEnumLong = Enum<ut@examples::enum_flow::MyEnumLong, felt, felt, felt>;
type examples::enum_flow::MyEnumGeneric::<(), core::felt> = Enum<ut@examples::enum_flow::MyEnumGeneric::<(), core::felt>, felt, Unit, felt>;
type NonZero<felt> = NonZero<felt>;
type Array<felt> = Array<felt>;
type RangeCheck = RangeCheck;
type u128 = u128;
type core::PanicResult::<core::array::Array::<core::felt>> = Enum<ut@core::PanicResult::<core::array::Array::<core::felt>>, Array<felt>, Array<felt>>;
type Tuple<Array<felt>, felt, u128> = Struct<ut@Tuple, Array<felt>, felt, u128>;
type core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)> = Enum<ut@core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, Tuple<Array<felt>, felt, u128>, Array<felt>>;
type core::PanicResult::<core::integer::u128> = Enum<ut@core::PanicResult::<core::integer::u128>, u128, Array<felt>>;
type core::PanicResult::<core::felt> = Enum<ut@core::PanicResult::<core::felt>, felt, Array<felt>>;
type Uninitialized<u128> = Uninitialized<u128>;
type core::bool = Enum<ut@core::bool, Unit, Unit>;
type Box<felt> = Box<felt>;
type GasBuiltin = GasBuiltin;
type Uninitialized<felt> = Uninitialized<felt>;
type examples::fib_struct::FibResult = Struct<ut@examples::fib_struct::FibResult, felt, felt, Unit>;
type core::option::Option::<core::integer::u128> = Enum<ut@core::option::Option::<core::integer::u128>, u128, Unit>;
type BuiltinCosts = BuiltinCosts;
type Pedersen = Pedersen;
type core::PanicResult::<()> = Enum<ut@core::PanicResult::<()>, Unit, Array<felt>>;

libfunc enum_match<core::option::Option::<(core::felt, core::felt)>> = enum_match<core::option::Option::<(core::felt, core::felt)>>;
libfunc branch_align = branch_align;
libfunc struct_deconstruct<Tuple<felt, felt>> = struct_deconstruct<Tuple<felt, felt>>;
libfunc drop<felt> = drop<felt>;
libfunc enum_init<core::option::Option::<core::felt>, 0> = enum_init<core::option::Option::<core::felt>, 0>;
libfunc store_temp<core::option::Option::<core::felt>> = store_temp<core::option::Option::<core::felt>>;
libfunc rename<core::option::Option::<core::felt>> = rename<core::option::Option::<core::felt>>;
libfunc jump = jump;
libfunc drop<Unit> = drop<Unit>;
libfunc struct_construct<Unit> = struct_construct<Unit>;
libfunc enum_init<core::option::Option::<core::felt>, 1> = enum_init<core::option::Option::<core::felt>, 1>;
libfunc felt_const<10> = felt_const<10>;
libfunc enum_init<examples::enum_flow::MyEnumShort, 0> = enum_init<examples::enum_flow::MyEnumShort, 0>;
libfunc store_temp<examples::enum_flow::MyEnumShort> = store_temp<examples::enum_flow::MyEnumShort>;
libfunc rename<examples::enum_flow::MyEnumShort> = rename<examples::enum_flow::MyEnumShort>;
libfunc function_call<user@examples::enum_flow::match_short> = function_call<user@examples::enum_flow::match_short>;
libfunc felt_const<11> = felt_const<11>;
libfunc enum_init<examples::enum_flow::MyEnumShort, 1> = enum_init<examples::enum_flow::MyEnumShort, 1>;
libfunc felt_const<20> = felt_const<20>;
libfunc enum_init<examples::enum_flow::MyEnumLong, 0> = enum_init<examples::enum_flow::MyEnumLong, 0>;
libfunc store_temp<examples::enum_flow::MyEnumLong> = store_temp<examples::enum_flow::MyEnumLong>;
libfunc rename<examples::enum_flow::MyEnumLong> = rename<examples::enum_flow::MyEnumLong>;
libfunc function_call<user@examples::enum_flow::match_long> = function_call<user@examples::enum_flow::match_long>;
libfunc felt_const<21> = felt_const<21>;
libfunc enum_init<examples::enum_flow::MyEnumLong, 1> = enum_init<examples::enum_flow::MyEnumLong, 1>;
libfunc felt_const<22> = felt_const<22>;
libfunc enum_init<examples::enum_flow::MyEnumLong, 2> = enum_init<examples::enum_flow::MyEnumLong, 2>;
libfunc felt_const<30> = felt_const<30>;
libfunc enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 0> = enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 0>;
libfunc drop<examples::enum_flow::MyEnumGeneric::<(), core::felt>> = drop<examples::enum_flow::MyEnumGeneric::<(), core::felt>>;
libfunc enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 1> = enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 1>;
libfunc felt_const<32> = felt_const<32>;
libfunc enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 2> = enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 2>;
libfunc felt_const<300> = felt_const<300>;
libfunc store_temp<felt> = store_temp<felt>;
libfunc enum_match<examples::enum_flow::MyEnumShort> = enum_match<examples::enum_flow::MyEnumShort>;
libfunc rename<felt> = rename<felt>;
libfunc enum_match<examples::enum_flow::MyEnumLong> = enum_match<examples::enum_flow::MyEnumLong>;
libfunc revoke_ap_tracking = revoke_ap_tracking;
libfunc dup<felt> = dup<felt>;
libfunc felt_jump_nz = felt_jump_nz;
libfunc drop<NonZero<felt>> = drop<NonZero<felt>>;
libfunc felt_add = felt_add;
libfunc felt_const<1> = felt_const<1>;
libfunc felt_sub = felt_sub;
libfunc function_call<user@examples::fib::fib> = function_call<user@examples::fib::fib>;
libfunc array_new<felt> = array_new<felt>;
libfunc array_append<felt> = array_append<felt>;
libfunc store_temp<RangeCheck> = store_temp<RangeCheck>;
libfunc store_temp<u128> = store_temp<u128>;
libfunc store_temp<Array<felt>> = store_temp<Array<felt>>;
libfunc rename<Array<felt>> = rename<Array<felt>>;
libfunc function_call<user@examples::fib_array::fib_inner> = function_call<user@examples::fib_array::fib_inner>;
libfunc enum_match<core::PanicResult::<core::array::Array::<core::felt>>> = enum_match<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 1> = enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 1>;
libfunc store_temp<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>> = store_temp<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>;
libfunc rename<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>> = rename<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>;
libfunc array_len<felt> = array_len<felt>;
libfunc u128_const<1> = u128_const<1>;
libfunc dup<u128> = dup<u128>;
libfunc rename<u128> = rename<u128>;
libfunc function_call<user@core::integer::u128_sub> = function_call<user@core::integer::u128_sub>;
libfunc enum_match<core::PanicResult::<core::integer::u128>> = enum_match<core::PanicResult::<core::integer::u128>>;
libfunc drop<u128> = drop<u128>;
libfunc drop<Array<felt>> = drop<Array<felt>>;
libfunc function_call<user@examples::fib_array::unchecked_array_at> = function_call<user@examples::fib_array::unchecked_array_at>;
libfunc enum_match<core::PanicResult::<core::felt>> = enum_match<core::PanicResult::<core::felt>>;
libfunc struct_construct<Tuple<Array<felt>, felt, u128>> = struct_construct<Tuple<Array<felt>, felt, u128>>;
libfunc enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 0> = enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 0>;
libfunc alloc_local<u128> = alloc_local<u128>;
libfunc finalize_locals = finalize_locals;
libfunc store_local<u128> = store_local<u128>;
libfunc u128_le = u128_le;
libfunc enum_init<core::bool, 0> = enum_init<core::bool, 0>;
libfunc rename<RangeCheck> = rename<RangeCheck>;
libfunc store_temp<core::bool> = store_temp<core::bool>;
libfunc rename<core::bool> = rename<core::bool>;
libfunc enum_init<core::bool, 1> = enum_init<core::bool, 1>;
libfunc enum_match<core::bool> = enum_match<core::bool>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>;
libfunc store_temp<core::PanicResult::<core::array::Array::<core::felt>>> = store_temp<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc rename<core::PanicResult::<core::array::Array::<core::felt>>> = rename<core::PanicResult::<core::array::Array::<core::felt>>>;
libfunc enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1> = enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>;
libfunc u128_const<2> = u128_const<2>;
libfunc array_at<felt> = array_at<felt>;
libfunc enum_match<core::option::Option::<core::felt>> = enum_match<core::option::Option::<core::felt>>;
libfunc struct_deconstruct<Unit> = struct_deconstruct<Unit>;
libfunc enum_init<core::PanicResult::<core::felt>, 1> = enum_init<core::PanicResult::<core::felt>, 1>;
libfunc store_temp<core::PanicResult::<core::felt>> = store_temp<core::PanicResult::<core::felt>>;
libfunc rename<core::PanicResult::<core::felt>> = rename<core::PanicResult::<core::felt>>;
libfunc enum_init<core::PanicResult::<core::felt>, 0> = enum_init<core::PanicResult::<core::felt>, 0>;
libfunc unbox<felt> = unbox<felt>;
libfunc drop<Box<felt>> = drop<Box<felt>>;
libfunc store_temp<Box<felt>> = store_temp<Box<felt>>;
libfunc dup<Box<felt>> = dup<Box<felt>>;
libfunc into_box<felt> = into_box<felt>;
libfunc function_call<user@examples::fib_box::fib> = function_call<user@examples::fib_box::fib>;
libfunc rename<Box<felt>> = rename<Box<felt>>;
libfunc felt_const<4> = felt_const<4>;
libfunc store_temp<Unit> = store_temp<Unit>;
libfunc rename<Unit> = rename<Unit>;
libfunc felt_const<0> = felt_const<0>;
libfunc struct_construct<Tuple<felt, felt>> = struct_construct<Tuple<felt, felt>>;
libfunc store_temp<Tuple<felt, felt>> = store_temp<Tuple<felt, felt>>;
libfunc rename<Tuple<felt, felt>> = rename<Tuple<felt, felt>>;
libfunc function_call<user@examples::fib_counter::fib> = function_call<user@examples::fib_counter::fib>;
libfunc get_gas = get_gas;
libfunc store_temp<GasBuiltin> = store_temp<GasBuiltin>;
libfunc felt_const<5197639> = felt_const<5197639>;
libfunc function_call<user@examples::fib_gas::fib> = function_call<user@examples::fib_gas::fib>;
libfunc alloc_local<felt> = alloc_local<felt>;
libfunc drop<Uninitialized<felt>> = drop<Uninitialized<felt>>;
libfunc function_call<user@examples::fib_local::fib> = function_call<user@examples::fib_local::fib>;
libfunc felt_const<2> = felt_const<2>;
libfunc store_local<felt> = store_local<felt>;
libfunc struct_construct<examples::fib_struct::FibResult> = struct_construct<examples::fib_struct::FibResult>;
libfunc store_temp<examples::fib_struct::FibResult> = store_temp<examples::fib_struct::FibResult>;
libfunc rename<examples::fib_struct::FibResult> = rename<examples::fib_struct::FibResult>;
libfunc function_call<user@examples::fib_struct::fib> = function_call<user@examples::fib_struct::fib>;
libfunc dup<examples::fib_struct::FibResult> = dup<examples::fib_struct::FibResult>;
libfunc struct_deconstruct<examples::fib_struct::FibResult> = struct_deconstruct<examples::fib_struct::FibResult>;
libfunc u128_to_felt = u128_to_felt;
libfunc enum_init<core::option::Option::<core::integer::u128>, 0> = enum_init<core::option::Option::<core::integer::u128>, 0>;
libfunc store_temp<core::option::Option::<core::integer::u128>> = store_temp<core::option::Option::<core::integer::u128>>;
libfunc rename<core::option::Option::<core::integer::u128>> = rename<core::option::Option::<core::integer::u128>>;
libfunc function_call<user@core::integer::u128_checked_add> = function_call<user@core::integer::u128_checked_add>;
libfunc enum_match<core::option::Option::<core::integer::u128>> = enum_match<core::option::Option::<core::integer::u128>>;
libfunc enum_init<core::option::Option::<core::integer::u128>, 1> = enum_init<core::option::Option::<core::integer::u128>, 1>;
libfunc function_call<user@core::integer::u128_checked_sub> = function_call<user@core::integer::u128_checked_sub>;
libfunc function_call<user@examples::fib_u128_checked::fib> = function_call<user@examples::fib_u128_checked::fib>;
libfunc function_call<user@core::integer::u128_add> = function_call<user@core::integer::u128_add>;
libfunc enum_init<core::PanicResult::<core::integer::u128>, 1> = enum_init<core::PanicResult::<core::integer::u128>, 1>;
libfunc store_temp<core::PanicResult::<core::integer::u128>> = store_temp<core::PanicResult::<core::integer::u128>>;
libfunc rename<core::PanicResult::<core::integer::u128>> = rename<core::PanicResult::<core::integer::u128>>;
libfunc function_call<user@examples::fib_u128::fib> = function_call<user@examples::fib_u128::fib>;
libfunc enum_init<core::PanicResult::<core::integer::u128>, 0> = enum_init<core::PanicResult::<core::integer::u128>, 0>;
libfunc function_call<user@core::felt_neg> = function_call<user@core::felt_neg>;
libfunc function_call<user@examples::fib_unary::inner::inner::fib_inner> = function_call<user@examples::fib_unary::inner::inner::fib_inner>;
libfunc function_call<user@core::felt_ne> = function_call<user@core::felt_ne>;
libfunc drop<BuiltinCosts> = drop<BuiltinCosts>;
libfunc store_temp<Pedersen> = store_temp<Pedersen>;
libfunc dup<BuiltinCosts> = dup<BuiltinCosts>;
libfunc get_gas_all = get_gas_all;
libfunc rename<GasBuiltin> = rename<GasBuiltin>;
libfunc store_temp<BuiltinCosts> = store_temp<BuiltinCosts>;
libfunc function_call<user@examples::hash_chain_gas::hash_chain> = function_call<user@examples::hash_chain_gas::hash_chain>;
libfunc pedersen = pedersen;
libfunc rename<Pedersen> = rename<Pedersen>;
libfunc function_call<user@examples::hash_chain::hash_chain> = function_call<user@examples::hash_chain::hash_chain>;
libfunc felt_const<3> = felt_const<3>;
libfunc function_call<user@core::cheatcodes::roll> = function_call<user@core::cheatcodes::roll>;
libfunc enum_match<core::PanicResult::<()>> = enum_match<core::PanicResult::<()>>;
libfunc enum_init<core::PanicResult::<()>, 1> = enum_init<core::PanicResult::<()>, 1>;
libfunc store_temp<core::PanicResult::<()>> = store_temp<core::PanicResult::<()>>;
libfunc rename<core::PanicResult::<()>> = rename<core::PanicResult::<()>>;
libfunc enum_init<core::PanicResult::<()>, 0> = enum_init<core::PanicResult::<()>, 0>;
libfunc dup<Unit> = dup<Unit>;
libfunc function_call<user@examples::testing::assert> = function_call<user@examples::testing::assert>;
libfunc felt_const<141676643251868248439803718> = felt_const<141676643251868248439803718>;
libfunc u128_overflow_add = u128_overflow_add;
libfunc u128_overflow_sub = u128_overflow_sub;
libfunc felt_const<141676643251848384249614150> = felt_const<141676643251848384249614150>;
libfunc felt_const<-1> = felt_const<-1>;
libfunc felt_mul = felt_mul;
libfunc function_call<user@core::felt_eq> = function_call<user@core::felt_eq>;
libfunc function_call<user@core::bool_not> = function_call<user@core::bool_not>;
libfunc cheat_roll = cheat_roll;
libfunc bool_not_impl = bool_not_impl;

enum_match<core::option::Option::<(core::felt, core::felt)>>([0]) { 1([1]) 9([2]) };
branch_align() -> ();
struct_deconstruct<Tuple<felt, felt>>([1]) -> ([3], [4]);
drop<felt>([4]) -> ();
enum_init<core::option::Option::<core::felt>, 0>([3]) -> ([5]);
store_temp<core::option::Option::<core::felt>>([5]) -> ([5]);
rename<core::option::Option::<core::felt>>([5]) -> ([6]);
rename<core::option::Option::<core::felt>>([6]) -> ([7]);
jump() { 16() };
branch_align() -> ();
drop<Unit>([2]) -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::option::Option::<core::felt>, 1>([8]) -> ([9]);
store_temp<core::option::Option::<core::felt>>([9]) -> ([9]);
rename<core::option::Option::<core::felt>>([9]) -> ([10]);
return([10]);
rename<core::option::Option::<core::felt>>([7]) -> ([11]);
return([11]);
felt_const<10>() -> ([0]);
enum_init<examples::enum_flow::MyEnumShort, 0>([0]) -> ([1]);
store_temp<examples::enum_flow::MyEnumShort>([1]) -> ([1]);
rename<examples::enum_flow::MyEnumShort>([1]) -> ([3]);
function_call<user@examples::enum_flow::match_short>([3]) -> ([2]);
drop<felt>([2]) -> ();
felt_const<11>() -> ([4]);
enum_init<examples::enum_flow::MyEnumShort, 1>([4]) -> ([5]);
store_temp<examples::enum_flow::MyEnumShort>([5]) -> ([5]);
rename<examples::enum_flow::MyEnumShort>([5]) -> ([7]);
function_call<user@examples::enum_flow::match_short>([7]) -> ([6]);
drop<felt>([6]) -> ();
felt_const<20>() -> ([8]);
enum_init<examples::enum_flow::MyEnumLong, 0>([8]) -> ([9]);
store_temp<examples::enum_flow::MyEnumLong>([9]) -> ([9]);
rename<examples::enum_flow::MyEnumLong>([9]) -> ([11]);
function_call<user@examples::enum_flow::match_long>([11]) -> ([10]);
drop<felt>([10]) -> ();
felt_const<21>() -> ([12]);
enum_init<examples::enum_flow::MyEnumLong, 1>([12]) -> ([13]);
store_temp<examples::enum_flow::MyEnumLong>([13]) -> ([13]);
rename<examples::enum_flow::MyEnumLong>([13]) -> ([15]);
function_call<user@examples::enum_flow::match_long>([15]) -> ([14]);
drop<felt>([14]) -> ();
felt_const<22>() -> ([16]);
enum_init<examples::enum_flow::MyEnumLong, 2>([16]) -> ([17]);
store_temp<examples::enum_flow::MyEnumLong>([17]) -> ([17]);
rename<examples::enum_flow::MyEnumLong>([17]) -> ([19]);
function_call<user@examples::enum_flow::match_long>([19]) -> ([18]);
drop<felt>([18]) -> ();
felt_const<30>() -> ([20]);
enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 0>([20]) -> ([21]);
drop<examples::enum_flow::MyEnumGeneric::<(), core::felt>>([21]) -> ();
struct_construct<Unit>() -> ([22]);
enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 1>([22]) -> ([23]);
drop<examples::enum_flow::MyEnumGeneric::<(), core::felt>>([23]) -> ();
felt_const<32>() -> ([24]);
enum_init<examples::enum_flow::MyEnumGeneric::<(), core::felt>, 2>([24]) -> ([25]);
drop<examples::enum_flow::MyEnumGeneric::<(), core::felt>>([25]) -> ();
felt_const<300>() -> ([26]);
store_temp<felt>([26]) -> ([27]);
return([27]);
enum_match<examples::enum_flow::MyEnumShort>([0]) { 61([1]) 65([2]) };
branch_align() -> ();
store_temp<felt>([1]) -> ([3]);
rename<felt>([3]) -> ([4]);
jump() { 68() };
branch_align() -> ();
store_temp<felt>([2]) -> ([5]);
rename<felt>([5]) -> ([4]);
rename<felt>([4]) -> ([6]);
return([6]);
enum_match<examples::enum_flow::MyEnumLong>([0]) { 71([1]) 75([2]) 79([3]) };
branch_align() -> ();
store_temp<felt>([1]) -> ([4]);
rename<felt>([4]) -> ([5]);
jump() { 82() };
branch_align() -> ();
store_temp<felt>([2]) -> ([6]);
rename<felt>([6]) -> ([5]);
jump() { 82() };
branch_align() -> ();
store_temp<felt>([3]) -> ([7]);
rename<felt>([7]) -> ([5]);
rename<felt>([5]) -> ([8]);
return([8]);
revoke_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [13]);
felt_jump_nz([13]) { fallthrough() 92([3]) };
branch_align() -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([4]);
jump() { 105() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
dup<felt>([1]) -> ([1], [14]);
felt_add([0], [14]) -> ([5]);
felt_const<1>() -> ([6]);
felt_sub([2], [6]) -> ([7]);
store_temp<felt>([1]) -> ([9]);
store_temp<felt>([5]) -> ([5]);
rename<felt>([5]) -> ([10]);
store_temp<felt>([7]) -> ([7]);
rename<felt>([7]) -> ([11]);
function_call<user@examples::fib::fib>([9], [10], [11]) -> ([8]);
rename<felt>([8]) -> ([4]);
rename<felt>([4]) -> ([12]);
return([12]);
revoke_ap_tracking() -> ();
array_new<felt>() -> ([2]);
felt_const<1>() -> ([3]);
store_temp<felt>([3]) -> ([3]);
array_append<felt>([2], [3]) -> ([4]);
felt_const<1>() -> ([5]);
store_temp<felt>([5]) -> ([5]);
array_append<felt>([4], [5]) -> ([6]);
store_temp<RangeCheck>([0]) -> ([9]);
store_temp<u128>([1]) -> ([10]);
store_temp<Array<felt>>([6]) -> ([6]);
rename<Array<felt>>([6]) -> ([11]);
function_call<user@examples::fib_array::fib_inner>([9], [10], [11]) -> ([7], [8]);
enum_match<core::PanicResult::<core::array::Array::<core::felt>>>([8]) { 121([12]) 124([13]) };
branch_align() -> ();
store_temp<Array<felt>>([12]) -> ([14]);
jump() { 130() };
branch_align() -> ();
enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 1>([13]) -> ([15]);
store_temp<RangeCheck>([7]) -> ([16]);
store_temp<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([15]) -> ([15]);
rename<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([15]) -> ([17]);
return([16], [17]);
array_len<felt>([14]) -> ([18], [19]);
u128_const<1>() -> ([20]);
store_temp<RangeCheck>([7]) -> ([23]);
store_temp<u128>([19]) -> ([19]);
dup<u128>([19]) -> ([19], [48]);
rename<u128>([48]) -> ([24]);
store_temp<u128>([20]) -> ([25]);
function_call<user@core::integer::u128_sub>([23], [24], [25]) -> ([21], [22]);
enum_match<core::PanicResult::<core::integer::u128>>([22]) { 139([26]) 142([27]) };
branch_align() -> ();
store_temp<u128>([26]) -> ([28]);
jump() { 150() };
branch_align() -> ();
drop<u128>([19]) -> ();
drop<Array<felt>>([18]) -> ();
enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 1>([27]) -> ([29]);
store_temp<RangeCheck>([21]) -> ([30]);
store_temp<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([29]) -> ([29]);
rename<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([29]) -> ([31]);
return([30], [31]);
store_temp<RangeCheck>([21]) -> ([35]);
store_temp<Array<felt>>([18]) -> ([36]);
store_temp<u128>([28]) -> ([37]);
function_call<user@examples::fib_array::unchecked_array_at>([35], [36], [37]) -> ([32], [33], [34]);
enum_match<core::PanicResult::<core::felt>>([34]) { 155([38]) 158([39]) };
branch_align() -> ();
store_temp<felt>([38]) -> ([40]);
jump() { 166() };
branch_align() -> ();
drop<Array<felt>>([33]) -> ();
drop<u128>([19]) -> ();
enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 1>([39]) -> ([41]);
store_temp<RangeCheck>([32]) -> ([42]);
store_temp<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([41]) -> ([41]);
rename<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([41]) -> ([43]);
return([42], [43]);
struct_construct<Tuple<Array<felt>, felt, u128>>([33], [40], [19]) -> ([44]);
enum_init<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>, 0>([44]) -> ([45]);
store_temp<RangeCheck>([32]) -> ([46]);
store_temp<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([45]) -> ([45]);
rename<core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>>([45]) -> ([47]);
return([46], [47]);
alloc_local<u128>() -> ([4]);
finalize_locals() -> ();
revoke_ap_tracking() -> ();
array_len<felt>([2]) -> ([5], [3]);
store_local<u128>([4], [3]) -> ([3]);
dup<u128>([1]) -> ([1], [83]);
dup<u128>([3]) -> ([3], [84]);
u128_le([0], [83], [84]) { fallthrough([6]) 188([7]) };
branch_align() -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::bool, 0>([8]) -> ([9]);
store_temp<RangeCheck>([6]) -> ([6]);
rename<RangeCheck>([6]) -> ([10]);
store_temp<core::bool>([9]) -> ([9]);
rename<core::bool>([9]) -> ([11]);
jump() { 195() };
branch_align() -> ();
struct_construct<Unit>() -> ([12]);
enum_init<core::bool, 1>([12]) -> ([13]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([10]);
store_temp<core::bool>([13]) -> ([13]);
rename<core::bool>([13]) -> ([11]);
enum_match<core::bool>([11]) { 196([14]) 199([15]) };
branch_align() -> ();
drop<Unit>([14]) -> ();
jump() { 208() };
branch_align() -> ();
drop<Unit>([15]) -> ();
drop<u128>([3]) -> ();
drop<u128>([1]) -> ();
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>([5]) -> ([16]);
store_temp<RangeCheck>([10]) -> ([17]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([16]) -> ([16]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([16]) -> ([18]);
return([17], [18]);
u128_const<1>() -> ([19]);
store_temp<RangeCheck>([10]) -> ([22]);
dup<u128>([3]) -> ([3], [85]);
store_temp<u128>([85]) -> ([23]);
store_temp<u128>([19]) -> ([24]);
function_call<user@core::integer::u128_sub>([22], [23], [24]) -> ([20], [21]);
enum_match<core::PanicResult::<core::integer::u128>>([21]) { 215([25]) 218([26]) };
branch_align() -> ();
store_temp<u128>([25]) -> ([27]);
jump() { 227() };
branch_align() -> ();
drop<u128>([3]) -> ();
drop<u128>([1]) -> ();
drop<Array<felt>>([5]) -> ();
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([26]) -> ([28]);
store_temp<RangeCheck>([20]) -> ([29]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([28]) -> ([28]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([28]) -> ([30]);
return([29], [30]);
store_temp<RangeCheck>([20]) -> ([34]);
store_temp<Array<felt>>([5]) -> ([35]);
store_temp<u128>([27]) -> ([36]);
function_call<user@examples::fib_array::unchecked_array_at>([34], [35], [36]) -> ([31], [32], [33]);
enum_match<core::PanicResult::<core::felt>>([33]) { 232([37]) 235([38]) };
branch_align() -> ();
store_temp<felt>([37]) -> ([39]);
jump() { 244() };
branch_align() -> ();
drop<u128>([3]) -> ();
drop<u128>([1]) -> ();
drop<Array<felt>>([32]) -> ();
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([38]) -> ([40]);
store_temp<RangeCheck>([31]) -> ([41]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([40]) -> ([40]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([40]) -> ([42]);
return([41], [42]);
u128_const<2>() -> ([43]);
store_temp<RangeCheck>([31]) -> ([46]);
store_temp<u128>([3]) -> ([47]);
store_temp<u128>([43]) -> ([48]);
function_call<user@core::integer::u128_sub>([46], [47], [48]) -> ([44], [45]);
enum_match<core::PanicResult::<core::integer::u128>>([45]) { 250([49]) 253([50]) };
branch_align() -> ();
store_temp<u128>([49]) -> ([51]);
jump() { 262() };
branch_align() -> ();
drop<felt>([39]) -> ();
drop<u128>([1]) -> ();
drop<Array<felt>>([32]) -> ();
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([50]) -> ([52]);
store_temp<RangeCheck>([44]) -> ([53]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([52]) -> ([52]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([52]) -> ([54]);
return([53], [54]);
store_temp<RangeCheck>([44]) -> ([58]);
store_temp<Array<felt>>([32]) -> ([59]);
store_temp<u128>([51]) -> ([60]);
function_call<user@examples::fib_array::unchecked_array_at>([58], [59], [60]) -> ([55], [56], [57]);
enum_match<core::PanicResult::<core::felt>>([57]) { 267([61]) 270([62]) };
branch_align() -> ();
store_temp<felt>([61]) -> ([63]);
jump() { 279() };
branch_align() -> ();
drop<u128>([1]) -> ();
drop<Array<felt>>([56]) -> ();
drop<felt>([39]) -> ();
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([62]) -> ([64]);
store_temp<RangeCheck>([55]) -> ([65]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([64]) -> ([64]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([64]) -> ([66]);
return([65], [66]);
felt_add([39], [63]) -> ([67]);
store_temp<felt>([67]) -> ([67]);
array_append<felt>([56], [67]) -> ([68]);
store_temp<RangeCheck>([55]) -> ([71]);
store_temp<u128>([1]) -> ([72]);
store_temp<Array<felt>>([68]) -> ([68]);
rename<Array<felt>>([68]) -> ([73]);
function_call<user@examples::fib_array::fib_inner>([71], [72], [73]) -> ([69], [70]);
enum_match<core::PanicResult::<core::array::Array::<core::felt>>>([70]) { 288([74]) 291([75]) };
branch_align() -> ();
store_temp<Array<felt>>([74]) -> ([76]);
jump() { 297() };
branch_align() -> ();
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 1>([75]) -> ([77]);
store_temp<RangeCheck>([69]) -> ([78]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([77]) -> ([77]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([77]) -> ([79]);
return([78], [79]);
enum_init<core::PanicResult::<core::array::Array::<core::felt>>, 0>([76]) -> ([80]);
store_temp<RangeCheck>([69]) -> ([81]);
store_temp<core::PanicResult::<core::array::Array::<core::felt>>>([80]) -> ([80]);
rename<core::PanicResult::<core::array::Array::<core::felt>>>([80]) -> ([82]);
return([81], [82]);
array_at<felt>([0], [1], [2]) { fallthrough([3], [4], [5]) 311([6], [7]) };
branch_align() -> ();
enum_init<core::option::Option::<core::felt>, 0>([5]) -> ([8]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([9]);
store_temp<Array<felt>>([4]) -> ([10]);
store_temp<core::option::Option::<core::felt>>([8]) -> ([8]);
rename<core::option::Option::<core::felt>>([8]) -> ([11]);
jump() { 319() };
branch_align() -> ();
struct_construct<Unit>() -> ([12]);
enum_init<core::option::Option::<core::felt>, 1>([12]) -> ([13]);
store_temp<RangeCheck>([6]) -> ([6]);
rename<RangeCheck>([6]) -> ([9]);
store_temp<Array<felt>>([7]) -> ([10]);
store_temp<core::option::Option::<core::felt>>([13]) -> ([13]);
rename<core::option::Option::<core::felt>>([13]) -> ([11]);
enum_match<core::option::Option::<core::felt>>([11]) { 320([14]) 323([15]) };
branch_align() -> ();
store_temp<felt>([14]) -> ([16]);
jump() { 335() };
branch_align() -> ();
struct_deconstruct<Unit>([15]) -> ();
array_new<felt>() -> ([17]);
felt_const<1>() -> ([18]);
store_temp<felt>([18]) -> ([18]);
array_append<felt>([17], [18]) -> ([19]);
enum_init<core::PanicResult::<core::felt>, 1>([19]) -> ([20]);
store_temp<RangeCheck>([9]) -> ([21]);
store_temp<Array<felt>>([10]) -> ([22]);
store_temp<core::PanicResult::<core::felt>>([20]) -> ([20]);
rename<core::PanicResult::<core::felt>>([20]) -> ([23]);
return([21], [22], [23]);
enum_init<core::PanicResult::<core::felt>, 0>([16]) -> ([24]);
store_temp<RangeCheck>([9]) -> ([25]);
store_temp<Array<felt>>([10]) -> ([26]);
store_temp<core::PanicResult::<core::felt>>([24]) -> ([24]);
rename<core::PanicResult::<core::felt>>([24]) -> ([27]);
return([25], [26], [27]);
revoke_ap_tracking() -> ();
unbox<felt>([2]) -> ([3]);
store_temp<felt>([3]) -> ([3]);
dup<felt>([3]) -> ([3], [18]);
felt_jump_nz([18]) { fallthrough() 351([4]) };
branch_align() -> ();
drop<Box<felt>>([1]) -> ();
drop<felt>([3]) -> ();
store_temp<Box<felt>>([0]) -> ([5]);
jump() { 370() };
branch_align() -> ();
drop<NonZero<felt>>([4]) -> ();
unbox<felt>([0]) -> ([6]);
dup<Box<felt>>([1]) -> ([1], [19]);
unbox<felt>([19]) -> ([7]);
store_temp<felt>([6]) -> ([6]);
store_temp<felt>([7]) -> ([7]);
felt_add([6], [7]) -> ([8]);
store_temp<felt>([8]) -> ([8]);
into_box<felt>([8]) -> ([9]);
felt_const<1>() -> ([10]);
felt_sub([3], [10]) -> ([11]);
store_temp<felt>([11]) -> ([11]);
into_box<felt>([11]) -> ([12]);
store_temp<Box<felt>>([1]) -> ([14]);
store_temp<Box<felt>>([9]) -> ([15]);
store_temp<Box<felt>>([12]) -> ([16]);
function_call<user@examples::fib_box::fib>([14], [15], [16]) -> ([13]);
rename<Box<felt>>([13]) -> ([5]);
rename<Box<felt>>([5]) -> ([17]);
return([17]);
revoke_ap_tracking() -> ();
felt_const<1>() -> ([0]);
felt_const<1>() -> ([1]);
felt_const<4>() -> ([2]);
store_temp<felt>([0]) -> ([4]);
store_temp<felt>([1]) -> ([5]);
store_temp<felt>([2]) -> ([6]);
function_call<user@examples::fib::fib>([4], [5], [6]) -> ([3]);
drop<felt>([3]) -> ();
struct_construct<Unit>() -> ([7]);
store_temp<Unit>([7]) -> ([7]);
rename<Unit>([7]) -> ([8]);
return([8]);
revoke_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [21]);
felt_jump_nz([21]) { fallthrough() 396([3]) };
branch_align() -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
felt_const<0>() -> ([4]);
struct_construct<Tuple<felt, felt>>([0], [4]) -> ([5]);
store_temp<Tuple<felt, felt>>([5]) -> ([5]);
rename<Tuple<felt, felt>>([5]) -> ([6]);
jump() { 415() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
dup<felt>([1]) -> ([1], [22]);
felt_add([0], [22]) -> ([7]);
felt_const<1>() -> ([8]);
felt_sub([2], [8]) -> ([9]);
store_temp<felt>([1]) -> ([11]);
store_temp<felt>([7]) -> ([7]);
rename<felt>([7]) -> ([12]);
store_temp<felt>([9]) -> ([9]);
rename<felt>([9]) -> ([13]);
function_call<user@examples::fib_counter::fib>([11], [12], [13]) -> ([10]);
struct_deconstruct<Tuple<felt, felt>>([10]) -> ([14], [15]);
felt_const<1>() -> ([16]);
felt_add([15], [16]) -> ([17]);
struct_construct<Tuple<felt, felt>>([14], [17]) -> ([18]);
store_temp<Tuple<felt, felt>>([18]) -> ([18]);
rename<Tuple<felt, felt>>([18]) -> ([19]);
rename<Tuple<felt, felt>>([19]) -> ([6]);
rename<Tuple<felt, felt>>([6]) -> ([20]);
return([20]);
revoke_ap_tracking() -> ();
get_gas([0], [1]) { fallthrough([5], [6]) 424([7], [8]) };
branch_align() -> ();
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([9]);
store_temp<GasBuiltin>([6]) -> ([10]);
jump() { 439() };
branch_align() -> ();
drop<felt>([4]) -> ();
drop<felt>([3]) -> ();
drop<felt>([2]) -> ();
array_new<felt>() -> ([11]);
felt_const<5197639>() -> ([12]);
store_temp<felt>([12]) -> ([12]);
array_append<felt>([11], [12]) -> ([13]);
enum_init<core::PanicResult::<core::felt>, 1>([13]) -> ([14]);
store_temp<RangeCheck>([7]) -> ([7]);
rename<RangeCheck>([7]) -> ([15]);
store_temp<GasBuiltin>([8]) -> ([16]);
store_temp<core::PanicResult::<core::felt>>([14]) -> ([14]);
rename<core::PanicResult::<core::felt>>([14]) -> ([17]);
return([15], [16], [17]);
dup<felt>([4]) -> ([4], [44]);
felt_jump_nz([44]) { fallthrough() 448([18]) };
branch_align() -> ();
drop<felt>([3]) -> ();
drop<felt>([4]) -> ();
store_temp<RangeCheck>([9]) -> ([19]);
store_temp<GasBuiltin>([10]) -> ([20]);
store_temp<felt>([2]) -> ([21]);
jump() { 476() };
branch_align() -> ();
drop<NonZero<felt>>([18]) -> ();
dup<felt>([3]) -> ([3], [45]);
felt_add([2], [45]) -> ([22]);
felt_const<1>() -> ([23]);
felt_sub([4], [23]) -> ([24]);
store_temp<RangeCheck>([9]) -> ([28]);
store_temp<GasBuiltin>([10]) -> ([29]);
store_temp<felt>([3]) -> ([30]);
store_temp<felt>([22]) -> ([22]);
rename<felt>([22]) -> ([31]);
store_temp<felt>([24]) -> ([24]);
rename<felt>([24]) -> ([32]);
function_call<user@examples::fib_gas::fib>([28], [29], [30], [31], [32]) -> ([25], [26], [27]);
enum_match<core::PanicResult::<core::felt>>([27]) { 463([33]) 466([34]) };
branch_align() -> ();
store_temp<felt>([33]) -> ([35]);
jump() { 473() };
branch_align() -> ();
enum_init<core::PanicResult::<core::felt>, 1>([34]) -> ([36]);
store_temp<RangeCheck>([25]) -> ([37]);
store_temp<GasBuiltin>([26]) -> ([38]);
store_temp<core::PanicResult::<core::felt>>([36]) -> ([36]);
rename<core::PanicResult::<core::felt>>([36]) -> ([39]);
return([37], [38], [39]);
store_temp<RangeCheck>([25]) -> ([19]);
store_temp<GasBuiltin>([26]) -> ([20]);
store_temp<felt>([35]) -> ([21]);
enum_init<core::PanicResult::<core::felt>, 0>([21]) -> ([40]);
store_temp<RangeCheck>([19]) -> ([41]);
store_temp<GasBuiltin>([20]) -> ([42]);
store_temp<core::PanicResult::<core::felt>>([40]) -> ([40]);
rename<core::PanicResult::<core::felt>>([40]) -> ([43]);
return([41], [42], [43]);
alloc_local<felt>() -> ([2]);
finalize_locals() -> ();
revoke_ap_tracking() -> ();
dup<felt>([0]) -> ([0], [20]);
felt_jump_nz([20]) { fallthrough() 493([3]) };
branch_align() -> ();
drop<felt>([0]) -> ();
drop<Uninitialized<felt>>([2]) -> ();
felt_const<1>() -> ([4]);
store_temp<felt>([4]) -> ([5]);
jump() { 524() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
felt_const<1>() -> ([6]);
dup<felt>([0]) -> ([0], [21]);
felt_sub([21], [6]) -> ([7]);
store_temp<felt>([7]) -> ([7]);
felt_jump_nz([7]) { fallthrough() 506([8]) };
branch_align() -> ();
drop<felt>([0]) -> ();
drop<Uninitialized<felt>>([2]) -> ();
felt_const<1>() -> ([9]);
store_temp<felt>([9]) -> ([10]);
jump() { 523() };
branch_align() -> ();
drop<NonZero<felt>>([8]) -> ();
felt_const<1>() -> ([11]);
dup<felt>([0]) -> ([0], [22]);
felt_sub([22], [11]) -> ([12]);
store_temp<felt>([12]) -> ([12]);
rename<felt>([12]) -> ([13]);
function_call<user@examples::fib_local::fib>([13]) -> ([1]);
felt_const<2>() -> ([14]);
felt_sub([0], [14]) -> ([15]);
store_temp<felt>([15]) -> ([15]);
rename<felt>([15]) -> ([17]);
store_local<felt>([2], [1]) -> ([1]);
function_call<user@examples::fib_local::fib>([17]) -> ([16]);
felt_add([1], [16]) -> ([18]);
store_temp<felt>([18]) -> ([18]);
rename<felt>([18]) -> ([10]);
rename<felt>([10]) -> ([5]);
rename<felt>([5]) -> ([19]);
return([19]);
revoke_ap_tracking() -> ();
dup<felt>([2]) -> ([2], [27]);
felt_jump_nz([27]) { fallthrough() 538([3]) };
branch_align() -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
felt_const<0>() -> ([4]);
struct_construct<Unit>() -> ([5]);
struct_construct<examples::fib_struct::FibResult>([0], [4], [5]) -> ([6]);
store_temp<examples::fib_struct::FibResult>([6]) -> ([6]);
rename<examples::fib_struct::FibResult>([6]) -> ([7]);
jump() { 564() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
dup<felt>([1]) -> ([1], [28]);
felt_add([0], [28]) -> ([8]);
felt_const<1>() -> ([9]);
felt_sub([2], [9]) -> ([10]);
store_temp<felt>([1]) -> ([12]);
store_temp<felt>([8]) -> ([8]);
rename<felt>([8]) -> ([13]);
store_temp<felt>([10]) -> ([10]);
rename<felt>([10]) -> ([14]);
function_call<user@examples::fib_struct::fib>([12], [13], [14]) -> ([11]);
dup<examples::fib_struct::FibResult>([11]) -> ([11], [29]);
struct_deconstruct<examples::fib_struct::FibResult>([29]) -> ([15], [16], [17]);
drop<felt>([16]) -> ();
drop<Unit>([17]) -> ();
struct_deconstruct<examples::fib_struct::FibResult>([11]) -> ([18], [19], [20]);
drop<felt>([18]) -> ();
drop<Unit>([20]) -> ();
felt_const<1>() -> ([21]);
felt_add([19], [21]) -> ([22]);
struct_construct<Unit>() -> ([23]);
struct_construct<examples::fib_struct::FibResult>([15], [22], [23]) -> ([24]);
store_temp<examples::fib_struct::FibResult>([24]) -> ([24]);
rename<examples::fib_struct::FibResult>([24]) -> ([25]);
rename<examples::fib_struct::FibResult>([25]) -> ([7]);
rename<examples::fib_struct::FibResult>([7]) -> ([26]);
return([26]);
revoke_ap_tracking() -> ();
dup<u128>([3]) -> ([3], [49]);
u128_to_felt([49]) -> ([4]);
felt_jump_nz([4]) { fallthrough() 578([5]) };
branch_align() -> ();
drop<u128>([3]) -> ();
drop<u128>([2]) -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([1]) -> ([6]);
store_temp<RangeCheck>([0]) -> ([7]);
store_temp<core::option::Option::<core::integer::u128>>([6]) -> ([6]);
rename<core::option::Option::<core::integer::u128>>([6]) -> ([8]);
jump() { 635() };
branch_align() -> ();
drop<NonZero<felt>>([5]) -> ();
store_temp<RangeCheck>([0]) -> ([11]);
store_temp<u128>([1]) -> ([12]);
dup<u128>([2]) -> ([2], [50]);
store_temp<u128>([50]) -> ([13]);
function_call<user@core::integer::u128_checked_add>([11], [12], [13]) -> ([9], [10]);
enum_match<core::option::Option::<core::integer::u128>>([10]) { 586([14]) 589([15]) };
branch_align() -> ();
store_temp<u128>([14]) -> ([16]);
jump() { 597() };
branch_align() -> ();
drop<u128>([3]) -> ();
drop<u128>([2]) -> ();
enum_init<core::option::Option::<core::integer::u128>, 1>([15]) -> ([17]);
store_temp<RangeCheck>([9]) -> ([18]);
store_temp<core::option::Option::<core::integer::u128>>([17]) -> ([17]);
rename<core::option::Option::<core::integer::u128>>([17]) -> ([19]);
return([18], [19]);
u128_const<1>() -> ([20]);
store_temp<RangeCheck>([9]) -> ([23]);
store_temp<u128>([3]) -> ([24]);
store_temp<u128>([20]) -> ([25]);
function_call<user@core::integer::u128_checked_sub>([23], [24], [25]) -> ([21], [22]);
enum_match<core::option::Option::<core::integer::u128>>([22]) { 603([26]) 606([27]) };
branch_align() -> ();
store_temp<u128>([26]) -> ([28]);
jump() { 614() };
branch_align() -> ();
drop<u128>([2]) -> ();
drop<u128>([16]) -> ();
enum_init<core::option::Option::<core::integer::u128>, 1>([27]) -> ([29]);
store_temp<RangeCheck>([21]) -> ([30]);
store_temp<core::option::Option::<core::integer::u128>>([29]) -> ([29]);
rename<core::option::Option::<core::integer::u128>>([29]) -> ([31]);
return([30], [31]);
store_temp<RangeCheck>([21]) -> ([34]);
store_temp<u128>([2]) -> ([35]);
store_temp<u128>([16]) -> ([36]);
store_temp<u128>([28]) -> ([37]);
function_call<user@examples::fib_u128_checked::fib>([34], [35], [36], [37]) -> ([32], [33]);
enum_match<core::option::Option::<core::integer::u128>>([33]) { 620([38]) 623([39]) };
branch_align() -> ();
store_temp<u128>([38]) -> ([40]);
jump() { 629() };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u128>, 1>([39]) -> ([41]);
store_temp<RangeCheck>([32]) -> ([42]);
store_temp<core::option::Option::<core::integer::u128>>([41]) -> ([41]);
rename<core::option::Option::<core::integer::u128>>([41]) -> ([43]);
return([42], [43]);
enum_init<core::option::Option::<core::integer::u128>, 0>([40]) -> ([44]);
store_temp<RangeCheck>([32]) -> ([45]);
store_temp<core::option::Option::<core::integer::u128>>([44]) -> ([44]);
rename<core::option::Option::<core::integer::u128>>([44]) -> ([46]);
rename<RangeCheck>([45]) -> ([7]);
rename<core::option::Option::<core::integer::u128>>([46]) -> ([8]);
rename<RangeCheck>([7]) -> ([47]);
rename<core::option::Option::<core::integer::u128>>([8]) -> ([48]);
return([47], [48]);
revoke_ap_tracking() -> ();
dup<u128>([3]) -> ([3], [48]);
u128_to_felt([48]) -> ([4]);
felt_jump_nz([4]) { fallthrough() 648([5]) };
branch_align() -> ();
drop<u128>([3]) -> ();
drop<u128>([2]) -> ();
store_temp<RangeCheck>([0]) -> ([6]);
store_temp<u128>([1]) -> ([7]);
jump() { 703() };
branch_align() -> ();
drop<NonZero<felt>>([5]) -> ();
store_temp<RangeCheck>([0]) -> ([10]);
store_temp<u128>([1]) -> ([11]);
dup<u128>([2]) -> ([2], [49]);
store_temp<u128>([49]) -> ([12]);
function_call<user@core::integer::u128_add>([10], [11], [12]) -> ([8], [9]);
enum_match<core::PanicResult::<core::integer::u128>>([9]) { 656([13]) 659([14]) };
branch_align() -> ();
store_temp<u128>([13]) -> ([15]);
jump() { 667() };
branch_align() -> ();
drop<u128>([3]) -> ();
drop<u128>([2]) -> ();
enum_init<core::PanicResult::<core::integer::u128>, 1>([14]) -> ([16]);
store_temp<RangeCheck>([8]) -> ([17]);
store_temp<core::PanicResult::<core::integer::u128>>([16]) -> ([16]);
rename<core::PanicResult::<core::integer::u128>>([16]) -> ([18]);
return([17], [18]);
u128_const<1>() -> ([19]);
store_temp<RangeCheck>([8]) -> ([22]);
store_temp<u128>([3]) -> ([23]);
store_temp<u128>([19]) -> ([24]);
function_call<user@core::integer::u128_sub>([22], [23], [24]) -> ([20], [21]);
enum_match<core::PanicResult::<core::integer::u128>>([21]) { 673([25]) 676([26]) };
branch_align() -> ();
store_temp<u128>([25]) -> ([27]);
jump() { 684() };
branch_align() -> ();
drop<u128>([2]) -> ();
drop<u128>([15]) -> ();
enum_init<core::PanicResult::<core::integer::u128>, 1>([26]) -> ([28]);
store_temp<RangeCheck>([20]) -> ([29]);
store_temp<core::PanicResult::<core::integer::u128>>([28]) -> ([28]);
rename<core::PanicResult::<core::integer::u128>>([28]) -> ([30]);
return([29], [30]);
store_temp<RangeCheck>([20]) -> ([33]);
store_temp<u128>([2]) -> ([34]);
store_temp<u128>([15]) -> ([35]);
store_temp<u128>([27]) -> ([36]);
function_call<user@examples::fib_u128::fib>([33], [34], [35], [36]) -> ([31], [32]);
enum_match<core::PanicResult::<core::integer::u128>>([32]) { 690([37]) 693([38]) };
branch_align() -> ();
store_temp<u128>([37]) -> ([39]);
jump() { 699() };
branch_align() -> ();
enum_init<core::PanicResult::<core::integer::u128>, 1>([38]) -> ([40]);
store_temp<RangeCheck>([31]) -> ([41]);
store_temp<core::PanicResult::<core::integer::u128>>([40]) -> ([40]);
rename<core::PanicResult::<core::integer::u128>>([40]) -> ([42]);
return([41], [42]);
store_temp<RangeCheck>([31]) -> ([43]);
store_temp<u128>([39]) -> ([44]);
rename<RangeCheck>([43]) -> ([6]);
rename<u128>([44]) -> ([7]);
enum_init<core::PanicResult::<core::integer::u128>, 0>([7]) -> ([45]);
store_temp<RangeCheck>([6]) -> ([46]);
store_temp<core::PanicResult::<core::integer::u128>>([45]) -> ([45]);
rename<core::PanicResult::<core::integer::u128>>([45]) -> ([47]);
return([46], [47]);
revoke_ap_tracking() -> ();
felt_const<1>() -> ([1]);
store_temp<felt>([1]) -> ([3]);
function_call<user@core::felt_neg>([3]) -> ([2]);
felt_const<1>() -> ([4]);
store_temp<felt>([4]) -> ([6]);
function_call<user@core::felt_neg>([6]) -> ([5]);
store_temp<felt>([2]) -> ([8]);
store_temp<felt>([5]) -> ([9]);
store_temp<felt>([0]) -> ([10]);
function_call<user@examples::fib_unary::inner::inner::fib_inner>([8], [9], [10]) -> ([7]);
rename<felt>([7]) -> ([12]);
function_call<user@core::felt_neg>([12]) -> ([11]);
rename<felt>([11]) -> ([13]);
return([13]);
revoke_ap_tracking() -> ();
felt_const<0>() -> ([3]);
dup<felt>([2]) -> ([2], [18]);
store_temp<felt>([18]) -> ([5]);
store_temp<felt>([3]) -> ([6]);
function_call<user@core::felt_ne>([5], [6]) -> ([4]);
enum_match<core::bool>([4]) { 730([7]) 736([8]) };
branch_align() -> ();
drop<Unit>([7]) -> ();
drop<felt>([1]) -> ();
drop<felt>([2]) -> ();
store_temp<felt>([0]) -> ([9]);
jump() { 749() };
branch_align() -> ();
drop<Unit>([8]) -> ();
dup<felt>([1]) -> ([1], [19]);
felt_add([0], [19]) -> ([10]);
felt_const<1>() -> ([11]);
felt_sub([2], [11]) -> ([12]);
store_temp<felt>([1]) -> ([14]);
store_temp<felt>([10]) -> ([10]);
rename<felt>([10]) -> ([15]);
store_temp<felt>([12]) -> ([12]);
rename<felt>([12]) -> ([16]);
function_call<user@examples::fib_unary::inner::inner::fib_inner>([14], [15], [16]) -> ([13]);
rename<felt>([13]) -> ([9]);
rename<felt>([9]) -> ([17]);
return([17]);
revoke_ap_tracking() -> ();
dup<felt>([3]) -> ([3], [54]);
felt_jump_nz([54]) { fallthrough() 765([5]) };
branch_align() -> ();
drop<felt>([3]) -> ();
drop<BuiltinCosts>([4]) -> ();
felt_const<0>() -> ([6]);
enum_init<core::PanicResult::<core::felt>, 0>([6]) -> ([7]);
store_temp<RangeCheck>([0]) -> ([8]);
store_temp<GasBuiltin>([1]) -> ([9]);
store_temp<Pedersen>([2]) -> ([10]);
store_temp<core::PanicResult::<core::felt>>([7]) -> ([7]);
rename<core::PanicResult::<core::felt>>([7]) -> ([11]);
return([8], [9], [10], [11]);
branch_align() -> ();
drop<NonZero<felt>>([5]) -> ();
dup<BuiltinCosts>([4]) -> ([4], [55]);
get_gas_all([0], [1], [55]) { fallthrough([12], [13]) 776([14], [15]) };
branch_align() -> ();
struct_construct<Unit>() -> ([16]);
drop<Unit>([16]) -> ();
store_temp<RangeCheck>([12]) -> ([12]);
rename<RangeCheck>([12]) -> ([17]);
store_temp<GasBuiltin>([13]) -> ([18]);
jump() { 793() };
branch_align() -> ();
drop<felt>([3]) -> ();
drop<BuiltinCosts>([4]) -> ();
struct_construct<Unit>() -> ([19]);
drop<Unit>([19]) -> ();
array_new<felt>() -> ([20]);
felt_const<5197639>() -> ([21]);
store_temp<felt>([21]) -> ([21]);
array_append<felt>([20], [21]) -> ([22]);
enum_init<core::PanicResult::<core::felt>, 1>([22]) -> ([23]);
store_temp<RangeCheck>([14]) -> ([14]);
rename<RangeCheck>([14]) -> ([24]);
store_temp<GasBuiltin>([15]) -> ([25]);
store_temp<Pedersen>([2]) -> ([26]);
store_temp<core::PanicResult::<core::felt>>([23]) -> ([23]);
rename<core::PanicResult::<core::felt>>([23]) -> ([27]);
return([24], [25], [26], [27]);
felt_const<1>() -> ([28]);
dup<felt>([3]) -> ([3], [56]);
felt_sub([56], [28]) -> ([29]);
rename<RangeCheck>([17]) -> ([34]);
rename<GasBuiltin>([18]) -> ([35]);
store_temp<Pedersen>([2]) -> ([36]);
store_temp<felt>([29]) -> ([29]);
rename<felt>([29]) -> ([37]);
store_temp<BuiltinCosts>([4]) -> ([38]);
function_call<user@examples::hash_chain_gas::hash_chain>([34], [35], [36], [37], [38]) -> ([30], [31], [32], [33]);
enum_match<core::PanicResult::<core::felt>>([33]) { 804([39]) 807([40]) };
branch_align() -> ();
store_temp<felt>([39]) -> ([41]);
jump() { 816() };
branch_align() -> ();
drop<felt>([3]) -> ();
enum_init<core::PanicResult::<core::felt>, 1>([40]) -> ([42]);
store_temp<RangeCheck>([30]) -> ([43]);
store_temp<GasBuiltin>([31]) -> ([44]);
store_temp<Pedersen>([32]) -> ([45]);
store_temp<core::PanicResult::<core::felt>>([42]) -> ([42]);
rename<core::PanicResult::<core::felt>>([42]) -> ([46]);
return([43], [44], [45], [46]);
pedersen([32], [41], [3]) -> ([47], [48]);
enum_init<core::PanicResult::<core::felt>, 0>([48]) -> ([49]);
store_temp<RangeCheck>([30]) -> ([50]);
store_temp<GasBuiltin>([31]) -> ([51]);
store_temp<Pedersen>([47]) -> ([47]);
rename<Pedersen>([47]) -> ([52]);
store_temp<core::PanicResult::<core::felt>>([49]) -> ([49]);
rename<core::PanicResult::<core::felt>>([49]) -> ([53]);
return([50], [51], [52], [53]);
revoke_ap_tracking() -> ();
dup<felt>([1]) -> ([1], [16]);
felt_jump_nz([16]) { fallthrough() 834([2]) };
branch_align() -> ();
drop<felt>([1]) -> ();
felt_const<0>() -> ([3]);
store_temp<Pedersen>([0]) -> ([4]);
store_temp<felt>([3]) -> ([5]);
return([4], [5]);
branch_align() -> ();
drop<NonZero<felt>>([2]) -> ();
felt_const<1>() -> ([6]);
dup<felt>([1]) -> ([1], [17]);
felt_sub([17], [6]) -> ([7]);
store_temp<Pedersen>([0]) -> ([10]);
store_temp<felt>([7]) -> ([7]);
rename<felt>([7]) -> ([11]);
function_call<user@examples::hash_chain::hash_chain>([10], [11]) -> ([8], [9]);
pedersen([8], [9], [1]) -> ([12], [13]);
store_temp<Pedersen>([12]) -> ([12]);
rename<Pedersen>([12]) -> ([14]);
store_temp<felt>([13]) -> ([13]);
rename<felt>([13]) -> ([15]);
return([14], [15]);
felt_const<1>() -> ([1]);
felt_const<2>() -> ([2]);
store_temp<felt>([1]) -> ([1]);
store_temp<felt>([2]) -> ([2]);
pedersen([0], [1], [2]) -> ([3], [4]);
felt_const<3>() -> ([5]);
store_temp<felt>([4]) -> ([4]);
store_temp<felt>([5]) -> ([5]);
pedersen([3], [4], [5]) -> ([6], [7]);
felt_const<4>() -> ([8]);
store_temp<felt>([7]) -> ([7]);
store_temp<felt>([8]) -> ([8]);
pedersen([6], [7], [8]) -> ([9], [10]);
store_temp<Pedersen>([9]) -> ([9]);
rename<Pedersen>([9]) -> ([11]);
store_temp<felt>([10]) -> ([10]);
rename<felt>([10]) -> ([12]);
return([11], [12]);
felt_const<1>() -> ([0]);
felt_const<2>() -> ([1]);
store_temp<felt>([0]) -> ([3]);
store_temp<felt>([1]) -> ([4]);
function_call<user@core::cheatcodes::roll>([3], [4]) -> ([2]);
enum_match<core::PanicResult::<()>>([2]) { 873([5]) 876([6]) };
branch_align() -> ();
store_temp<Unit>([5]) -> ([7]);
jump() { 881() };
branch_align() -> ();
enum_init<core::PanicResult::<()>, 1>([6]) -> ([8]);
store_temp<core::PanicResult::<()>>([8]) -> ([8]);
rename<core::PanicResult::<()>>([8]) -> ([9]);
return([9]);
enum_init<core::PanicResult::<()>, 0>([7]) -> ([10]);
store_temp<core::PanicResult::<()>>([10]) -> ([10]);
rename<core::PanicResult::<()>>([10]) -> ([11]);
return([11]);
struct_construct<Unit>() -> ([0]);
dup<Unit>([0]) -> ([0], [14]);
enum_init<core::bool, 1>([14]) -> ([1]);
felt_const<1>() -> ([2]);
store_temp<core::bool>([1]) -> ([1]);
rename<core::bool>([1]) -> ([4]);
store_temp<felt>([2]) -> ([5]);
function_call<user@examples::testing::assert>([4], [5]) -> ([3]);
store_temp<Unit>([0]) -> ([0]);
drop<Unit>([0]) -> ();
enum_match<core::PanicResult::<()>>([3]) { 896([6]) 899([7]) };
branch_align() -> ();
store_temp<Unit>([6]) -> ([8]);
jump() { 904() };
branch_align() -> ();
enum_init<core::PanicResult::<()>, 1>([7]) -> ([9]);
store_temp<core::PanicResult::<()>>([9]) -> ([9]);
rename<core::PanicResult::<()>>([9]) -> ([10]);
return([10]);
drop<Unit>([8]) -> ();
struct_construct<Unit>() -> ([11]);
enum_init<core::PanicResult::<()>, 0>([11]) -> ([12]);
store_temp<core::PanicResult::<()>>([12]) -> ([12]);
rename<core::PanicResult::<()>>([12]) -> ([13]);
return([13]);
enum_match<core::bool>([0]) { 911([2]) 919([3]) };
branch_align() -> ();
drop<Unit>([2]) -> ();
array_new<felt>() -> ([4]);
array_append<felt>([4], [1]) -> ([5]);
enum_init<core::PanicResult::<()>, 1>([5]) -> ([6]);
store_temp<core::PanicResult::<()>>([6]) -> ([6]);
rename<core::PanicResult::<()>>([6]) -> ([7]);
return([7]);
branch_align() -> ();
drop<Unit>([3]) -> ();
drop<felt>([1]) -> ();
struct_construct<Unit>() -> ([8]);
enum_init<core::PanicResult::<()>, 0>([8]) -> ([9]);
store_temp<core::PanicResult::<()>>([9]) -> ([9]);
rename<core::PanicResult::<()>>([9]) -> ([10]);
return([10]);
store_temp<RangeCheck>([0]) -> ([5]);
store_temp<u128>([1]) -> ([6]);
store_temp<u128>([2]) -> ([7]);
function_call<user@core::integer::u128_checked_sub>([5], [6], [7]) -> ([3], [4]);
enum_match<core::option::Option::<core::integer::u128>>([4]) { 932([8]) 936([9]) };
branch_align() -> ();
store_temp<u128>([8]) -> ([10]);
rename<u128>([10]) -> ([11]);
jump() { 947() };
branch_align() -> ();
drop<Unit>([9]) -> ();
array_new<felt>() -> ([12]);
felt_const<141676643251868248439803718>() -> ([13]);
store_temp<felt>([13]) -> ([13]);
array_append<felt>([12], [13]) -> ([14]);
enum_init<core::PanicResult::<core::integer::u128>, 1>([14]) -> ([15]);
store_temp<RangeCheck>([3]) -> ([16]);
store_temp<core::PanicResult::<core::integer::u128>>([15]) -> ([15]);
rename<core::PanicResult::<core::integer::u128>>([15]) -> ([17]);
return([16], [17]);
enum_init<core::PanicResult::<core::integer::u128>, 0>([11]) -> ([18]);
store_temp<RangeCheck>([3]) -> ([19]);
store_temp<core::PanicResult::<core::integer::u128>>([18]) -> ([18]);
rename<core::PanicResult::<core::integer::u128>>([18]) -> ([20]);
return([19], [20]);
u128_overflow_add([0], [1], [2]) { fallthrough([3], [4]) 960([5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([7]) -> ([7]);
rename<core::option::Option::<core::integer::u128>>([7]) -> ([9]);
jump() { 968() };
branch_align() -> ();
drop<u128>([6]) -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::option::Option::<core::integer::u128>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([11]) -> ([11]);
rename<core::option::Option::<core::integer::u128>>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::option::Option::<core::integer::u128>>([9]) -> ([13]);
return([12], [13]);
u128_overflow_sub([0], [1], [2]) { fallthrough([3], [4]) 979([5], [6]) };
branch_align() -> ();
enum_init<core::option::Option::<core::integer::u128>, 0>([4]) -> ([7]);
store_temp<RangeCheck>([3]) -> ([3]);
rename<RangeCheck>([3]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([7]) -> ([7]);
rename<core::option::Option::<core::integer::u128>>([7]) -> ([9]);
jump() { 987() };
branch_align() -> ();
drop<u128>([6]) -> ();
struct_construct<Unit>() -> ([10]);
enum_init<core::option::Option::<core::integer::u128>, 1>([10]) -> ([11]);
store_temp<RangeCheck>([5]) -> ([5]);
rename<RangeCheck>([5]) -> ([8]);
store_temp<core::option::Option::<core::integer::u128>>([11]) -> ([11]);
rename<core::option::Option::<core::integer::u128>>([11]) -> ([9]);
rename<RangeCheck>([8]) -> ([12]);
rename<core::option::Option::<core::integer::u128>>([9]) -> ([13]);
return([12], [13]);
store_temp<RangeCheck>([0]) -> ([5]);
store_temp<u128>([1]) -> ([6]);
store_temp<u128>([2]) -> ([7]);
function_call<user@core::integer::u128_checked_add>([5], [6], [7]) -> ([3], [4]);
enum_match<core::option::Option::<core::integer::u128>>([4]) { 995([8]) 999([9]) };
branch_align() -> ();
store_temp<u128>([8]) -> ([10]);
rename<u128>([10]) -> ([11]);
jump() { 1010() };
branch_align() -> ();
drop<Unit>([9]) -> ();
array_new<felt>() -> ([12]);
felt_const<141676643251848384249614150>() -> ([13]);
store_temp<felt>([13]) -> ([13]);
array_append<felt>([12], [13]) -> ([14]);
enum_init<core::PanicResult::<core::integer::u128>, 1>([14]) -> ([15]);
store_temp<RangeCheck>([3]) -> ([16]);
store_temp<core::PanicResult::<core::integer::u128>>([15]) -> ([15]);
rename<core::PanicResult::<core::integer::u128>>([15]) -> ([17]);
return([16], [17]);
enum_init<core::PanicResult::<core::integer::u128>, 0>([11]) -> ([18]);
store_temp<RangeCheck>([3]) -> ([19]);
store_temp<core::PanicResult::<core::integer::u128>>([18]) -> ([18]);
rename<core::PanicResult::<core::integer::u128>>([18]) -> ([20]);
return([19], [20]);
felt_const<-1>() -> ([1]);
felt_mul([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([2]);
rename<felt>([2]) -> ([3]);
return([3]);
store_temp<felt>([0]) -> ([3]);
store_temp<felt>([1]) -> ([4]);
function_call<user@core::felt_eq>([3], [4]) -> ([2]);
rename<core::bool>([2]) -> ([6]);
function_call<user@core::bool_not>([6]) -> ([5]);
rename<core::bool>([5]) -> ([7]);
return([7]);
cheat_roll([0], [1]) { fallthrough() 1030([2]) };
branch_align() -> ();
jump() { 1037() };
branch_align() -> ();
array_new<felt>() -> ([3]);
array_append<felt>([3], [2]) -> ([4]);
enum_init<core::PanicResult::<()>, 1>([4]) -> ([5]);
store_temp<core::PanicResult::<()>>([5]) -> ([5]);
rename<core::PanicResult::<()>>([5]) -> ([6]);
return([6]);
struct_construct<Unit>() -> ([7]);
enum_init<core::PanicResult::<()>, 0>([7]) -> ([8]);
store_temp<core::PanicResult::<()>>([8]) -> ([8]);
rename<core::PanicResult::<()>>([8]) -> ([9]);
return([9]);
felt_sub([0], [1]) -> ([2]);
store_temp<felt>([2]) -> ([2]);
felt_jump_nz([2]) { fallthrough() 1051([3]) };
branch_align() -> ();
struct_construct<Unit>() -> ([4]);
enum_init<core::bool, 1>([4]) -> ([5]);
store_temp<core::bool>([5]) -> ([5]);
rename<core::bool>([5]) -> ([6]);
jump() { 1057() };
branch_align() -> ();
drop<NonZero<felt>>([3]) -> ();
struct_construct<Unit>() -> ([7]);
enum_init<core::bool, 0>([7]) -> ([8]);
store_temp<core::bool>([8]) -> ([8]);
rename<core::bool>([8]) -> ([6]);
rename<core::bool>([6]) -> ([9]);
return([9]);
bool_not_impl([0]) -> ([1]);
store_temp<core::bool>([1]) -> ([1]);
rename<core::bool>([1]) -> ([2]);
return([2]);

examples::corelib_usage::foo@0([0]: core::option::Option::<(core::felt, core::felt)>) -> (core::option::Option::<core::felt>);
examples::enum_flow::main@18() -> (felt);
examples::enum_flow::match_short@60([0]: examples::enum_flow::MyEnumShort) -> (felt);
examples::enum_flow::match_long@70([0]: examples::enum_flow::MyEnumLong) -> (felt);
examples::fib::fib@84([0]: felt, [1]: felt, [2]: felt) -> (felt);
examples::fib_array::fib@107([0]: RangeCheck, [1]: u128) -> (RangeCheck, core::PanicResult::<(core::array::Array::<core::felt>, core::felt, core::integer::u128)>);
examples::fib_array::fib_inner@172([0]: RangeCheck, [1]: u128, [2]: Array<felt>) -> (RangeCheck, core::PanicResult::<core::array::Array::<core::felt>>);
examples::fib_array::unchecked_array_at@302([0]: RangeCheck, [1]: Array<felt>, [2]: u128) -> (RangeCheck, Array<felt>, core::PanicResult::<core::felt>);
examples::fib_box::fib@341([0]: Box<felt>, [1]: Box<felt>, [2]: Box<felt>) -> (Box<felt>);
examples::fib_caller::fib_caller@372() -> (Unit);
examples::fib_counter::fib@385([0]: felt, [1]: felt, [2]: felt) -> (Tuple<felt, felt>);
examples::fib_gas::fib@417([0]: RangeCheck, [1]: GasBuiltin, [2]: felt, [3]: felt, [4]: felt) -> (RangeCheck, GasBuiltin, core::PanicResult::<core::felt>);
examples::fib_local::fib@482([0]: felt) -> (felt);
examples::fib_struct::fib@526([0]: felt, [1]: felt, [2]: felt) -> (examples::fib_struct::FibResult);
examples::fib_u128_checked::fib@566([0]: RangeCheck, [1]: u128, [2]: u128, [3]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
examples::fib_u128::fib@638([0]: RangeCheck, [1]: u128, [2]: u128, [3]: u128) -> (RangeCheck, core::PanicResult::<core::integer::u128>);
examples::fib_unary::fib@708([0]: felt) -> (felt);
examples::fib_unary::inner::inner::fib_inner@723([0]: felt, [1]: felt, [2]: felt) -> (felt);
examples::hash_chain_gas::hash_chain@751([0]: RangeCheck, [1]: GasBuiltin, [2]: Pedersen, [3]: felt, [4]: BuiltinCosts) -> (RangeCheck, GasBuiltin, Pedersen, core::PanicResult::<core::felt>);
examples::hash_chain::hash_chain@825([0]: Pedersen, [1]: felt) -> (Pedersen, felt);
examples::pedersen_test::test_pedersen@849([0]: Pedersen) -> (Pedersen, felt);
examples::cheatcode_test::test_cheatcode_test@867() -> (core::PanicResult::<()>);
examples::testing::run_tests@885() -> (core::PanicResult::<()>);
examples::testing::assert@910([0]: core::bool, [1]: felt) -> (core::PanicResult::<()>);
core::integer::u128_sub@927([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::PanicResult::<core::integer::u128>);
core::integer::u128_checked_add@952([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
core::integer::u128_checked_sub@971([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::option::Option::<core::integer::u128>);
core::integer::u128_add@990([0]: RangeCheck, [1]: u128, [2]: u128) -> (RangeCheck, core::PanicResult::<core::integer::u128>);
core::felt_neg@1015([0]: felt) -> (felt);
core::felt_ne@1020([0]: felt, [1]: felt) -> (core::bool);
core::cheatcodes::roll@1027([0]: felt, [1]: felt) -> (core::PanicResult::<()>);
core::felt_eq@1042([0]: felt, [1]: felt) -> (core::bool);
core::bool_not@1059([0]: core::bool) -> (core::bool);
